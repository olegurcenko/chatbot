{"ast":null,"code":"var _jsxFileName = \"/home/oleg/Desktop/ai_challenge/src/chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [inputMessage, setInputMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const sendMessage = async () => {\n    try {\n      const response = await axios.get('https://api.ai21.com/segmentation/v1', {\n        params: {\n          apiKey: 'CFGpHpI79jWZAToZNTgxfJSN3blQFyue',\n          source: inputMessage\n        }\n      });\n\n      // Get segments from API response\n      const segments = response.data.segments;\n\n      // Update state with segmented messages\n      setMessages(prevMessages => [...prevMessages, ...segments]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n\n    // Clear input field\n    setInputMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"Kvl+r7mhzaQ215QlKd5ScVqk30I=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ChatInterface","_s","inputMessage","setInputMessage","messages","setMessages","sendMessage","response","get","params","apiKey","source","segments","data","prevMessages","error","console","children","className","map","message","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/oleg/Desktop/ai_challenge/src/chat.jsx"],"sourcesContent":["\nimport React, { useState } from 'react';\nimport axios from 'axios';\n\nconst ChatInterface = () => {\n  const [inputMessage, setInputMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const sendMessage = async () => {\n    try {\n      const response = await axios.get('https://api.ai21.com/segmentation/v1', {\n        params: {\n          apiKey: 'CFGpHpI79jWZAToZNTgxfJSN3blQFyue',\n          source: inputMessage\n        }\n      });\n\n      // Get segments from API response\n      const segments = response.data.segments;\n\n      // Update state with segmented messages\n      setMessages(prevMessages => [...prevMessages, ...segments]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n\n    // Clear input field\n    setInputMessage('');\n  };\n\n  return (\n    <div>\n      <div className=\"chat-window\">\n        {messages.map((message, index) => (\n          <div key={index} className=\"message\">{message}</div>\n        ))}\n      </div>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputMessage}\n          onChange={e => setInputMessage(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,sCAAsC,EAAE;QACvEC,MAAM,EAAE;UACNC,MAAM,EAAE,kCAAkC;UAC1CC,MAAM,EAAET;QACV;MACF,CAAC,CAAC;;MAEF;MACA,MAAMU,QAAQ,GAAGL,QAAQ,CAACM,IAAI,CAACD,QAAQ;;MAEvC;MACAP,WAAW,CAACS,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAE,GAAGF,QAAQ,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;;IAEA;IACAZ,eAAe,CAAC,EAAE,CAAC;EACrB,CAAC;EAED,oBACEJ,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAKmB,SAAS,EAAC,aAAa;MAAAD,QAAA,EACzBb,QAAQ,CAACe,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BtB,OAAA;QAAiBmB,SAAS,EAAC,SAAS;QAAAD,QAAA,EAAEG;MAAO,GAAnCC,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoC,CACpD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN1B,OAAA;MAAKmB,SAAS,EAAC,iBAAiB;MAAAD,QAAA,gBAC9BlB,OAAA;QACE2B,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEzB,YAAa;QACpB0B,QAAQ,EAAEC,CAAC,IAAI1B,eAAe,CAAC0B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;QAC/CI,WAAW,EAAC;MAAsB;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,eACF1B,OAAA;QAAQiC,OAAO,EAAE1B,WAAY;QAAAW,QAAA,EAAC;MAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACxB,EAAA,CA5CID,aAAa;AAAAiC,EAAA,GAAbjC,aAAa;AA8CnB,eAAeA,aAAa;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}