{"ast":null,"code":"var _jsxFileName = \"/home/oleg/Desktop/ai_challenge/src/chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatInterface = () => {\n  _s();\n  const [inputMessage, setInputMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  const sendMessage = async () => {\n    try {\n      const openaiResponse = await generateResponse(inputMessage);\n      console.log(\"Response from OpenAI:\", openaiResponse);\n\n      // Update state with the response from OpenAI\n      setMessages(prevMessages => [...prevMessages, {\n        sender: 'user',\n        text: inputMessage\n      }, {\n        sender: 'bot',\n        text: openaiResponse\n      }]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n\n    // Clear input field\n    setInputMessage('');\n  };\n  const generateResponse = async message => {\n    const apiKey = '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'; // Replace with your actual OpenAI API key\n\n    try {\n      const response = await axios.get('https://api.openai.com/v1/completions', {\n        model: 'text-davinci-003',\n        prompt: message,\n        max_tokens: 50,\n        temperature: 0.7,\n        n: 1,\n        stop: ['\\n']\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${apiKey}`\n        }\n      });\n      return response.data.choices[0].text.trim();\n    } catch (error) {\n      console.error('Error generating text:', error);\n      return null;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.sender}`,\n        children: msg.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        placeholder: \"Type your message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatInterface, \"Kvl+r7mhzaQ215QlKd5ScVqk30I=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ChatInterface","_s","inputMessage","setInputMessage","messages","setMessages","sendMessage","openaiResponse","generateResponse","console","log","prevMessages","sender","text","error","message","apiKey","response","get","model","prompt","max_tokens","temperature","n","stop","headers","data","choices","trim","children","className","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["/home/oleg/Desktop/ai_challenge/src/chat.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nconst ChatInterface = () => {\n  const [inputMessage, setInputMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  const sendMessage = async () => {\n    try {\n      const openaiResponse = await generateResponse(inputMessage);\n      console.log(\"Response from OpenAI:\", openaiResponse);\n\n      // Update state with the response from OpenAI\n      setMessages(prevMessages => [\n        ...prevMessages,\n        { sender: 'user', text: inputMessage },\n        { sender: 'bot', text: openaiResponse }\n      ]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n\n    // Clear input field\n    setInputMessage('');\n  };\n\n  const generateResponse = async (message) => {\n    const apiKey = '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'; // Replace with your actual OpenAI API key\n\n    try {\n      const response = await axios.get(\n        'https://api.openai.com/v1/completions',\n        {\n          model: 'text-davinci-003',\n          prompt: message,\n          max_tokens: 50,\n          temperature: 0.7,\n          n: 1,\n          stop: ['\\n']\n        },\n        {\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${apiKey}`\n          }\n        }\n      );\n\n      return response.data.choices[0].text.trim();\n    } catch (error) {\n      console.error('Error generating text:', error);\n      return null;\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"chat-window\">\n        {messages.map((msg, index) => (\n          <div key={index} className={`message ${msg.sender}`}>\n            {msg.text}\n          </div>\n        ))}\n      </div>\n      <div className=\"input-container\">\n        <input\n          type=\"text\"\n          value={inputMessage}\n          onChange={e => setInputMessage(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button onClick={sendMessage}>Send</button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}